def Major(arr, n):
    candidate1, candidate2, count1, count2 = None, None, 0, 0

    
    for num in arr:
        if num == candidate1:
            count1 += 1
        elif num == candidate2:
            count2 += 1
        elif count1 == 0:
            candidate1, count1 = num, 1
        elif count2 == 0:
            candidate2, count2 = num, 1
        else:
            count1 -= 1
            count2 -= 1

    count1, count2 = 0, 0

   
    for num in arr:
        if num == candidate1:
            count1 += 1
        elif num == candidate2:
            count2 += 1

    
    required_count = n // 3
    flag = 0

    if count1 > required_count:
        print(candidate1, end=" ")
        flag = 1
    if count2 > required_count:
        print(candidate2, end=" ")
        flag = 1

    if flag == 0:
        print("No Majority Element")

arr = [2, 2, 3, 1, 3, 2, 1, 1]
n = len(arr)

Major(arr, n)





Algorithm: 
Each represented by an integer in the array.
Start by identifying two potential influential figures, named Figure A and Figure B.
Traverse through the array, observing the presence of each integer.
If the attendee matches Figure A or Figure B, take note.
If a new integer appears and both Figure A and Figure B are already "occupied," consider them as potential influential figures.
If someone appears, increment the count of the respective influential figure.
If an influential figure reaches a certain threshold, they gain recognition and reset their count to maintain exclusivity.
After observing attendee frequency, re-scan the gathering to count the appearances of Figure A and Figure B.
If either influential figure appears more than one-third of the time, they are officially recognized as influential figures.
Figure A and Figure B, if recognized, represent the individuals who have a strong presence, appearing more than one-third of the time .

